name: GitHub CI

on:
  pull_request:
    branches-ignore:
      - next
    paths-ignore:
      - examples
      - Dockerfile.template
      - LICENSE
      - README.md
  push:
    branches-ignore:
      - next
    paths-ignore:
      - examples
      - Dockerfile.template
      - LICENSE
      - README.md

defaults:
  run:
    shell: "bash -Eeuo pipefail -x {0}"

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          ignore_paths: initdb.d
          ignore_names: generate-stackbrew-library.sh
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: Dockerfile.template

  generate-jobs:
    name: Generate Jobs
    runs-on: ubuntu-latest
    outputs:
      strategy: ${{ steps.generate-jobs.outputs.strategy }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker-library/bashbrew@v0.1.8
      - id: generate-jobs
        name: Generate Jobs
        run: |
          strategy="$(GITHUB_REPOSITORY='mariadb' "$BASHBREW_SCRIPTS/github-actions/generate.sh" | jq -c '.matrix.include |= map(.meta.entries[0].tags[0] as $tag | .runs.mariadbtest = "./.test/run.sh " + $tag)')"
          echo "strategy=$strategy" >> "$GITHUB_OUTPUT"
          jq . <<<"$strategy" # sanity check / debugging aid

  test:
    needs: generate-jobs
    strategy: ${{ fromJson(needs.generate-jobs.outputs.strategy) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Prepare Environment
        run: ${{ matrix.runs.prepare }}
      - name: Pull Dependencies
        run: ${{ matrix.runs.pull }}
      - name: Build ${{ matrix.name }}
        run: ${{ matrix.runs.build }}
      - name: History ${{ matrix.name }}
        run: ${{ matrix.runs.history }}
      - name: Test ${{ matrix.name }}
        run: ${{ matrix.runs.test }}
      - name: Extra MariaDB Tests ${{ matrix.name }}
        run: ${{ matrix.runs.mariadbtest }}
      - name: '"docker images"'
        run: ${{ matrix.runs.images }}
